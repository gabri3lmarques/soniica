{"version":3,"sources":["category-menu/category-menu.js","create-playlist/create-playlist.js","player/player.js","top-banner/top-banner.js","top-menu/top-menu.js"],"names":["document","querySelectorAll","forEach","header","addEventListener","category","parentElement","isActive","classList","contains","cat","remove","add","getElementById","createPlaylistButton","feedbackDiv","async","playlistNameInput","playlistName","value","trim","await","createPlaylist","textContent","style","color","error","console","Player","constructor","this","audio","Audio","currentSong","currentPlaylist","isPlaying","isLooping","isRandom","titleElement","querySelector","artistElement","timeElement","totalTimeElement","genresElement","thumbElement","playPauseButton","nextButton","previousButton","loopButton","randomButton","progressBarContainer","progressBar","volumeSlider","volumeIcon","barPlayer","addToPlaylistFormContainer","tagsContainer","togglePlayPause","next","previous","toggleLoop","toggleRandom","updateProgressBar","handleSongEnd","adjustVolume","e","updateTimeDisplay","setTotalTime","seek","startDrag","initializeFirstSong","volume","getSongTags","tagsHTML","getAttribute","innerHTML","initializeAddToPlaylistForm","data","addToPlaylistForm","dataset","content","duration","isNaN","formatTime","remainingTime","currentTime","seconds","minutes","Math","floor","remainingSeconds","String","padStart","event","newVolume","target","firstSong","firstPlaylist","src","updatePlayerInfo","load","getRandomSong","songs","let","randomSong","random","length","getNextSong","currentIndex","findIndex","song","getPreviousSong","play","songElement","playlistElement","songSrc","syncButtons","pause","nextSong","previousSong","genres","map","li","thumbSrc","join","button","progress","width","rect","getBoundingClientRect","offsetX","clientX","left","dragHandler","stopDrag","removeEventListener","player","glideElement","playlist","loginLink","Splide","type","perPage","arrows","autoplay","interval","speed","rewind","mount","userIcon","input","searchForm"],"mappings":"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","file":"main.min.js","sourcesContent":["\ndocument.querySelectorAll('.category-menu .category-menu_header').forEach(header => {\n  header.addEventListener('click', () => {\n    const category = header.parentElement;\n\n    // Verifica se a categoria já está ativa\n    const isActive = category.classList.contains('active');\n\n    // Fecha todas as categorias\n    document.querySelectorAll('.category-menu').forEach(cat => {\n      cat.classList.remove('active');\n    });\n\n    // Se a categoria não estava ativa, abre a categoria clicada\n    if (!isActive) {\n      category.classList.add('active');\n    }\n  });\n});\n\n","document.addEventListener(\"DOMContentLoaded\", () => {\n    if(document.getElementById(\"create-playlist-btn\")){\n        const createPlaylistButton = document.getElementById(\"create-playlist-btn\");\n        const feedbackDiv = document.getElementById(\"playlist-feedback\");\n\n        createPlaylistButton.addEventListener(\"click\", async () => {\n        const playlistNameInput = document.getElementById(\"playlist_name\");\n        const playlistName = playlistNameInput.value.trim();\n\n        if (!playlistName) {\n            feedbackDiv.textContent = \"O nome da playlist não pode estar vazio.\";\n            feedbackDiv.style.color = \"red\";\n            return;\n        }\n\n        // Criar a playlist\n        try {\n            await createPlaylist(playlistName);\n            feedbackDiv.textContent = `Playlist \"${playlistName}\" criada com sucesso!`;\n            feedbackDiv.style.color = \"green\";\n            playlistNameInput.value = \"\"; // Limpa o campo de entrada\n        } catch (error) {\n            feedbackDiv.textContent = \"Erro ao criar a playlist.\";\n            feedbackDiv.style.color = \"red\";\n            console.error(\"Erro ao criar a playlist:\", error);\n        }\n        });        \n    }\n});","class Player {\n    constructor() {\n        this.audio = new Audio();\n        this.currentSong = null;\n        this.currentPlaylist = null;\n        this.isPlaying = false;\n        this.isLooping = false; // Estado do loop\n        this.isRandom = false; // Estado do random\n\n        // Elementos do player principal\n        this.titleElement = document.querySelector('.current-title');\n        this.artistElement = document.querySelector('.current-artist');\n        this.timeElement = document.querySelector('.current-time');\n        this.totalTimeElement = document.querySelector('.total-time'); // Tempo total\n        this.genresElement = document.querySelector('.current-genres');\n        this.thumbElement = document.querySelector('.current-thumb');\n        this.playPauseButton = document.querySelector('.play-pause');\n        this.nextButton = document.querySelector('.next');\n        this.previousButton = document.querySelector('.previous');\n        this.loopButton = document.querySelector('.loop');\n        this.randomButton = document.querySelector('.random'); // Botão de random\n        this.progressBarContainer = document.querySelector('.progress-bar-container');\n        this.progressBar = document.querySelector('.progress-bar');\n        this.volumeSlider = document.querySelector('#volume-slider'); // Slider de volume\n        this.volumeIcon = document.querySelector('.volume-icon'); // Slider de volume\n        this.barPlayer =  document.querySelector('.sound-wave-player');\n        this.addToPlaylistFormContainer = document.querySelector('.add-to-playlist-form-hidden');\n        this.tagsContainer = document.querySelector('.current-genres');\n\n        // Event listeners\n        this.playPauseButton.addEventListener('click', () => this.togglePlayPause());\n        this.nextButton.addEventListener('click', () => this.next());\n        this.previousButton.addEventListener('click', () => this.previous());\n        this.loopButton.addEventListener('click', () => this.toggleLoop());\n        this.randomButton.addEventListener('click', () => this.toggleRandom());\n        this.audio.addEventListener('timeupdate', () => this.updateProgressBar());\n        this.audio.addEventListener('ended', () => this.handleSongEnd());\n        this.volumeSlider.addEventListener('input', (e) => this.adjustVolume(e));\n        this.audio.addEventListener('timeupdate', () => this.updateTimeDisplay()); \n        this.audio.addEventListener('loadedmetadata', () => this.setTotalTime());\n\n        // Eventos para a barra de progresso\n        this.progressBarContainer.addEventListener('click', (e) => this.seek(e));\n        this.progressBarContainer.addEventListener('mousedown', (e) => this.startDrag(e));\n\n        // Inicializar a primeira música automaticamente\n        this.initializeFirstSong();\n        \n        this.audio.volume = this.volumeSlider.value;\n    }\n\n    getSongTags() {\n        if(this.currentSong) {\n                    // Seleciona o elemento com data-tags\n        const element = this.currentSong.querySelector('div[data-tags]');\n\n        // Pega o valor do atributo data-tags\n        const tagsHTML = element.getAttribute('data-tags');\n\n        // Injeta o conteúdo no outro elemento\n        const targetElement = this.tagsContainer;// Selecione o elemento alvo\n        targetElement.innerHTML = tagsHTML; // Insere as tags como conteúdo   \n        }\n    }\n\n    initializeAddToPlaylistForm() {\n        if (this.currentSong) {\n            // Procurar pelo elemento '.add-to-playlist-form' na música atual\n            const addToPlaylistForm = this.currentSong.querySelector('.source');\n\n            if (addToPlaylistForm) {\n                // Copiar o conteúdo HTML para o player principal\n                const data = addToPlaylistForm.dataset.content;\n\n                if(this.addToPlaylistFormContainer) {\n                    this.addToPlaylistFormContainer.innerHTML = data;\n                    //this.addToPlaylistFormContainer.classList.add('custom-hidden-select');\n                }\n\n            } \n        }\n    }\n\n    // Configurar o tempo total da música\n    setTotalTime() {\n        if (!isNaN(this.audio.duration)) {\n            const duration = this.audio.duration;\n            this.totalTimeElement.textContent = this.formatTime(duration);\n            this.timeElement.textContent = this.formatTime(duration);\n            this.getSongTags()\n        }\n    }\n\n    // Atualizar o tempo restante\n    updateTimeDisplay() {\n        if (!isNaN(this.audio.duration)) {\n            const remainingTime = this.audio.duration - this.audio.currentTime;\n            this.timeElement.textContent = this.formatTime(remainingTime); // Exibe o tempo restante\n        }\n    }\n\n    // Formatar tempo em MM:SS\n    formatTime(seconds) {\n        const minutes = Math.floor(seconds / 60);\n        const remainingSeconds = Math.floor(seconds % 60);\n        return `${String(minutes).padStart(2, '0')}:${String(remainingSeconds).padStart(2, '0')}`;\n    }\n\n    \n    adjustVolume(event) {\n        // Ajustar o volume do elemento de áudio com base no slider\n        const newVolume = event.target.value;\n        this.audio.volume = newVolume;\n\n        if(newVolume == 0){\n            this.volumeIcon.classList.add('zero')\n        } else {\n            this.volumeIcon.classList.remove('zero')\n        }\n    }\n\n    initializeFirstSong() {\n        const firstPlaylist = document.querySelector('.playlist');\n        if (!firstPlaylist) return;\n\n        const firstSong = firstPlaylist.querySelector('.song');\n        if (!firstSong) return;\n\n        this.currentPlaylist = firstPlaylist;\n        this.currentSong = firstSong;\n        this.audio.src = firstSong.dataset.src;\n\n        this.updatePlayerInfo(firstSong);\n\n        // Carregar metadados para calcular a duração\n        this.audio.load();\n\n        this.initializeAddToPlaylistForm();\n\n        this.getSongTags();\n    }\n\n    toggleRandom() {\n        this.isRandom = !this.isRandom;\n\n        // Adicionar ou remover a classe 'active' no botão random\n        if (this.isRandom) {\n            this.randomButton.classList.add('active');\n        } else {\n            this.randomButton.classList.remove('active');\n        }\n    }\n\n    getRandomSong() {\n        const songs = [...this.currentPlaylist.querySelectorAll('.song')];\n        let randomSong;\n\n        do {\n            randomSong = songs[Math.floor(Math.random() * songs.length)];\n            this.initializeAddToPlaylistForm();\n        } while (randomSong === this.currentSong && songs.length > 1);\n\n        return randomSong;\n    }\n\n    getNextSong() {\n        if (this.isRandom) {\n            return this.getRandomSong();\n        }\n\n        const songs = [...this.currentPlaylist.querySelectorAll('.song')];\n        const currentIndex = songs.findIndex(song => song === this.currentSong);\n        return songs[currentIndex + 1] || (this.isLooping ? songs[0] : null);\n    }\n\n    getPreviousSong() {\n        const songs = [...this.currentPlaylist.querySelectorAll('.song')];\n        const currentIndex = songs.findIndex(song => song === this.currentSong);\n        return songs[currentIndex - 1] || (this.isLooping ? songs[songs.length - 1] : null);\n    }\n\n    play(songElement, playlistElement) {\n        const songSrc = songElement.dataset.src;\n        \n\n        if (this.currentSong && this.currentSong !== songElement) {\n            this.currentSong.querySelector('.play-button').classList.remove('active');\n            this.currentSong.classList.remove('active');\n        }\n\n        if (this.audio.src !== songSrc) {\n            this.audio.src = songSrc;\n        }\n        this.audio.play();\n        this.isPlaying = true;\n        this.currentSong = songElement;\n        this.initializeAddToPlaylistForm();\n        this.currentPlaylist = playlistElement;\n\n        this.updatePlayerInfo(songElement);\n        this.syncButtons(songElement);\n\n        this.getSongTags();\n    }\n\n    pause(songElement) {\n        this.audio.pause();\n        this.isPlaying = false;\n        songElement.querySelector('.play-button').classList.remove('active');\n        songElement.classList.remove('active');\n        this.playPauseButton.classList.remove('active');\n        this.barPlayer.classList.remove('active');\n    }\n\n    togglePlayPause() {\n        if (this.isPlaying) {\n            this.pause(this.currentSong);\n        } else {\n            this.audio.play();\n            this.isPlaying = true;\n            this.currentSong.querySelector('.play-button').classList.add('active');\n            this.currentSong.classList.add('active');\n            this.playPauseButton.classList.add('active');\n            this.barPlayer.classList.add('active');\n        }\n    }\n\n    toggleLoop() {\n        this.isLooping = !this.isLooping;\n\n        if (this.isLooping) {\n            this.loopButton.classList.add('active');\n        } else {\n            this.loopButton.classList.remove('active');\n        }\n    }\n\n    next() {\n        const nextSong = this.getNextSong();\n        if (nextSong) {\n            this.play(nextSong, this.currentPlaylist);\n        }\n    }\n\n    previous() {\n        if (this.audio.currentTime > 2) {\n            this.audio.currentTime = 0;\n        } else {\n            const previousSong = this.getPreviousSong();\n            if (previousSong) {\n                this.play(previousSong, this.currentPlaylist);\n            }\n        }\n    }\n\n    handleSongEnd() {\n        const nextSong = this.getNextSong();\n        if (nextSong) {\n            this.play(nextSong, this.currentPlaylist);\n        } else {\n            this.isPlaying = false;\n            this.audio.currentTime = 0;\n            this.syncButtons(null);\n        }\n    }\n\n    updatePlayerInfo(songElement) {\n        this.titleElement.textContent = songElement.querySelector('.title').textContent;\n        this.artistElement.textContent = songElement.querySelector('.artist').textContent;\n\n        const genres = [...songElement.querySelectorAll('.genres li')].map(li => li.textContent);\n        this.genresElement.textContent = genres.join(', ');\n\n        const thumbSrc = songElement.querySelector('.thumb').src;\n        this.thumbElement.src = thumbSrc;\n    }\n\n    syncButtons(songElement) {\n        document.querySelectorAll('.play-button').forEach(button => button.classList.remove('active'));\n        document.querySelectorAll('.song').forEach(song => song.classList.remove('active'));\n\n        if (songElement) {\n            songElement.querySelector('.play-button').classList.add('active');\n            songElement.classList.add('active');\n            this.playPauseButton.classList.add('active');\n            this.barPlayer.classList.add('active');\n        } else {\n            this.playPauseButton.classList.remove('active');\n            this.barPlayer.classList.remove('active');\n        }\n    }\n\n    updateProgressBar() {\n        const progress = (this.audio.currentTime / this.audio.duration) * 100;\n        this.progressBar.style.width = `${progress}%`;\n    }\n\n    seek(event) {\n        const rect = this.progressBarContainer.getBoundingClientRect();\n        const offsetX = event.clientX - rect.left;\n        const percentage = offsetX / rect.width;\n        this.audio.currentTime = percentage * this.audio.duration;\n    }\n\n    startDrag(event) {\n        const dragHandler = (e) => this.seek(e);\n        const stopDrag = () => {\n            document.removeEventListener('mousemove', dragHandler);\n            document.removeEventListener('mouseup', stopDrag);\n        };\n\n        document.addEventListener('mousemove', dragHandler);\n        document.addEventListener('mouseup', stopDrag);\n\n        this.seek(event);\n    }\n}\n\n// Start player\nconst player = new Player();\n\n//Take all playlists\ndocument.querySelectorAll('.playlist').forEach(playlist => {\n    const songs = playlist.querySelectorAll('.song');\n\n    //start play the first song \n    songs.forEach(song => {\n        const playButton = song.querySelector('.play-button');\n        playButton.addEventListener('click', () => {\n            if (player.currentSong === song && player.isPlaying) {\n                player.pause(song);\n            } else {\n                player.play(song, playlist);\n                player.initializeAddToPlaylistForm();\n            }\n        });\n    });\n});","const glideElement = document.querySelector('.splide');\n\nif (glideElement) {\n    new Splide( '.splide', {\n        type   : 'fade',\n        perPage: 1,\n        arrows: false,\n        autoplay: true,\n        interval: 6000,\n        speed: 2000,\n        rewind: true\n    } ).mount();\n}\n\n  ","// efeito hover no link de login\nconst loginLink = document.querySelector('.login_link');\nconst userIcon = document.querySelector('.user-icon');\n\n// Adiciona os eventos de mouseover e mouseout ao elemento com a classe 'login_link'\nloginLink.addEventListener('mouseover', () => {\n    userIcon.classList.add('active'); \n});\n\nloginLink.addEventListener('mouseout', () => {\n    userIcon.classList.remove('active'); \n});\n\n//efeito de foco no search \nconst input = document.getElementById('s');\nconst searchForm = document.querySelector('.searchform');\n\n// Adiciona evento de foco no input\ninput.addEventListener('focus', () => {\n    searchForm.classList.add('active'); // Adiciona a classe 'active'\n});\n\n// Adiciona evento de perda de foco no input\ninput.addEventListener('blur', () => {\n    searchForm.classList.remove('active'); // Remove a classe 'active'\n});\n\n"]}