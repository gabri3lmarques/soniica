{"version":3,"sources":["player/player.js","top-banner/top-banner.js","top-menu/top-menu.js"],"names":["Player","constructor","this","audio","Audio","currentSong","currentPlaylist","isPlaying","isLooping","isRandom","titleElement","document","querySelector","artistElement","timeElement","totalTimeElement","genresElement","thumbElement","playPauseButton","nextButton","previousButton","loopButton","randomButton","progressBarContainer","progressBar","volumeSlider","volumeIcon","barPlayer","addToPlaylistFormContainer","tagsContainer","addEventListener","togglePlayPause","next","previous","toggleLoop","toggleRandom","updateProgressBar","handleSongEnd","adjustVolume","e","updateTimeDisplay","setTotalTime","seek","startDrag","initializeFirstSong","volume","value","getSongTags","tagsHTML","getAttribute","innerHTML","initializeAddToPlaylistForm","data","addToPlaylistForm","dataset","content","duration","isNaN","textContent","formatTime","remainingTime","currentTime","seconds","minutes","Math","floor","remainingSeconds","String","padStart","event","newVolume","target","classList","add","remove","firstSong","firstPlaylist","src","updatePlayerInfo","load","getRandomSong","songs","querySelectorAll","let","randomSong","random","length","getNextSong","currentIndex","findIndex","song","getPreviousSong","play","songElement","playlistElement","songSrc","syncButtons","pause","nextSong","previousSong","genres","map","li","thumbSrc","join","forEach","button","progress","style","width","rect","getBoundingClientRect","offsetX","clientX","left","dragHandler","stopDrag","removeEventListener","player","glideElement","playlist","loginLink","console","log","Splide","type","perPage","arrows","autoplay","interval","speed","rewind","mount","userIcon","input","getElementById","searchForm"],"mappings":"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","file":"main.min.js","sourcesContent":["class Player {\n    constructor() {\n        this.audio = new Audio();\n        this.currentSong = null;\n        this.currentPlaylist = null;\n        this.isPlaying = false;\n        this.isLooping = false; // Estado do loop\n        this.isRandom = false; // Estado do random\n\n        // Elementos do player principal\n        this.titleElement = document.querySelector('.current-title');\n        this.artistElement = document.querySelector('.current-artist');\n        this.timeElement = document.querySelector('.current-time');\n        this.totalTimeElement = document.querySelector('.total-time'); // Tempo total\n        this.genresElement = document.querySelector('.current-genres');\n        this.thumbElement = document.querySelector('.current-thumb');\n        this.playPauseButton = document.querySelector('.play-pause');\n        this.nextButton = document.querySelector('.next');\n        this.previousButton = document.querySelector('.previous');\n        this.loopButton = document.querySelector('.loop');\n        this.randomButton = document.querySelector('.random'); // Bot√£o de random\n        this.progressBarContainer = document.querySelector('.progress-bar-container');\n        this.progressBar = document.querySelector('.progress-bar');\n        this.volumeSlider = document.querySelector('#volume-slider'); // Slider de volume\n        this.volumeIcon = document.querySelector('.volume-icon'); // Slider de volume\n        this.barPlayer =  document.querySelector('.sound-wave-player');\n        this.addToPlaylistFormContainer = document.querySelector('.add-to-playlist-form-hidden');\n        this.tagsContainer = document.querySelector('.current-genres');\n\n        // Event listeners\n        this.playPauseButton.addEventListener('click', () => this.togglePlayPause());\n        this.nextButton.addEventListener('click', () => this.next());\n        this.previousButton.addEventListener('click', () => this.previous());\n        this.loopButton.addEventListener('click', () => this.toggleLoop());\n        this.randomButton.addEventListener('click', () => this.toggleRandom());\n        this.audio.addEventListener('timeupdate', () => this.updateProgressBar());\n        this.audio.addEventListener('ended', () => this.handleSongEnd());\n        this.volumeSlider.addEventListener('input', (e) => this.adjustVolume(e));\n        this.audio.addEventListener('timeupdate', () => this.updateTimeDisplay()); \n        this.audio.addEventListener('loadedmetadata', () => this.setTotalTime());\n\n        // Eventos para a barra de progresso\n        this.progressBarContainer.addEventListener('click', (e) => this.seek(e));\n        this.progressBarContainer.addEventListener('mousedown', (e) => this.startDrag(e));\n\n        // Inicializar a primeira m√∫sica automaticamente\n        this.initializeFirstSong();\n        \n        this.audio.volume = this.volumeSlider.value;\n    }\n\n    getSongTags() {\n        if(this.currentSong) {\n                    // Seleciona o elemento com data-tags\n        const element = this.currentSong.querySelector('div[data-tags]');\n\n        // Pega o valor do atributo data-tags\n        const tagsHTML = element.getAttribute('data-tags');\n\n        // Injeta o conte√∫do no outro elemento\n        const targetElement = this.tagsContainer;// Selecione o elemento alvo\n        targetElement.innerHTML = tagsHTML; // Insere as tags como conte√∫do   \n        }\n    }\n\n    initializeAddToPlaylistForm() {\n        if (this.currentSong) {\n            // Procurar pelo elemento '.add-to-playlist-form' na m√∫sica atual\n            const addToPlaylistForm = this.currentSong.querySelector('.source');\n\n            if (addToPlaylistForm) {\n                // Copiar o conte√∫do HTML para o player principal\n                const data = addToPlaylistForm.dataset.content;\n\n                if(this.addToPlaylistFormContainer) {\n                    this.addToPlaylistFormContainer.innerHTML = data;\n                    //this.addToPlaylistFormContainer.classList.add('custom-hidden-select');\n                }\n\n            } \n        }\n    }\n\n    // Configurar o tempo total da m√∫sica\n    setTotalTime() {\n        if (!isNaN(this.audio.duration)) {\n            const duration = this.audio.duration;\n            this.totalTimeElement.textContent = this.formatTime(duration);\n            this.timeElement.textContent = this.formatTime(duration);\n            this.getSongTags()\n        }\n    }\n\n    // Atualizar o tempo restante\n    updateTimeDisplay() {\n        if (!isNaN(this.audio.duration)) {\n            const remainingTime = this.audio.duration - this.audio.currentTime;\n            this.timeElement.textContent = this.formatTime(remainingTime); // Exibe o tempo restante\n        }\n    }\n\n    // Formatar tempo em MM:SS\n    formatTime(seconds) {\n        const minutes = Math.floor(seconds / 60);\n        const remainingSeconds = Math.floor(seconds % 60);\n        return `${String(minutes).padStart(2, '0')}:${String(remainingSeconds).padStart(2, '0')}`;\n    }\n\n    \n    adjustVolume(event) {\n        // Ajustar o volume do elemento de √°udio com base no slider\n        const newVolume = event.target.value;\n        this.audio.volume = newVolume;\n\n        if(newVolume == 0){\n            this.volumeIcon.classList.add('zero')\n        } else {\n            this.volumeIcon.classList.remove('zero')\n        }\n    }\n\n    initializeFirstSong() {\n        const firstPlaylist = document.querySelector('.playlist');\n        if (!firstPlaylist) return;\n\n        const firstSong = firstPlaylist.querySelector('.song');\n        if (!firstSong) return;\n\n        this.currentPlaylist = firstPlaylist;\n        this.currentSong = firstSong;\n        this.audio.src = firstSong.dataset.src;\n\n        this.updatePlayerInfo(firstSong);\n\n        // Carregar metadados para calcular a dura√ß√£o\n        this.audio.load();\n\n        this.initializeAddToPlaylistForm();\n\n        this.getSongTags();\n    }\n\n    toggleRandom() {\n        this.isRandom = !this.isRandom;\n\n        // Adicionar ou remover a classe 'active' no bot√£o random\n        if (this.isRandom) {\n            this.randomButton.classList.add('active');\n        } else {\n            this.randomButton.classList.remove('active');\n        }\n    }\n\n    getRandomSong() {\n        const songs = [...this.currentPlaylist.querySelectorAll('.song')];\n        let randomSong;\n\n        do {\n            randomSong = songs[Math.floor(Math.random() * songs.length)];\n            this.initializeAddToPlaylistForm();\n        } while (randomSong === this.currentSong && songs.length > 1);\n\n        return randomSong;\n    }\n\n    getNextSong() {\n        if (this.isRandom) {\n            return this.getRandomSong();\n        }\n\n        const songs = [...this.currentPlaylist.querySelectorAll('.song')];\n        const currentIndex = songs.findIndex(song => song === this.currentSong);\n        return songs[currentIndex + 1] || (this.isLooping ? songs[0] : null);\n    }\n\n    getPreviousSong() {\n        const songs = [...this.currentPlaylist.querySelectorAll('.song')];\n        const currentIndex = songs.findIndex(song => song === this.currentSong);\n        return songs[currentIndex - 1] || (this.isLooping ? songs[songs.length - 1] : null);\n    }\n\n    play(songElement, playlistElement) {\n        const songSrc = songElement.dataset.src;\n        \n\n        if (this.currentSong && this.currentSong !== songElement) {\n            this.currentSong.querySelector('.play-button').classList.remove('active');\n            this.currentSong.classList.remove('active');\n        }\n\n        if (this.audio.src !== songSrc) {\n            this.audio.src = songSrc;\n        }\n        this.audio.play();\n        this.isPlaying = true;\n        this.currentSong = songElement;\n        this.initializeAddToPlaylistForm();\n        this.currentPlaylist = playlistElement;\n\n        this.updatePlayerInfo(songElement);\n        this.syncButtons(songElement);\n\n        this.getSongTags();\n    }\n\n    pause(songElement) {\n        this.audio.pause();\n        this.isPlaying = false;\n        songElement.querySelector('.play-button').classList.remove('active');\n        songElement.classList.remove('active');\n        this.playPauseButton.classList.remove('active');\n        this.barPlayer.classList.remove('active');\n    }\n\n    togglePlayPause() {\n        if (this.isPlaying) {\n            this.pause(this.currentSong);\n        } else {\n            this.audio.play();\n            this.isPlaying = true;\n            this.currentSong.querySelector('.play-button').classList.add('active');\n            this.currentSong.classList.add('active');\n            this.playPauseButton.classList.add('active');\n            this.barPlayer.classList.add('active');\n        }\n    }\n\n    toggleLoop() {\n        this.isLooping = !this.isLooping;\n\n        if (this.isLooping) {\n            this.loopButton.classList.add('active');\n        } else {\n            this.loopButton.classList.remove('active');\n        }\n    }\n\n    next() {\n        const nextSong = this.getNextSong();\n        if (nextSong) {\n            this.play(nextSong, this.currentPlaylist);\n        }\n    }\n\n    previous() {\n        if (this.audio.currentTime > 2) {\n            this.audio.currentTime = 0;\n        } else {\n            const previousSong = this.getPreviousSong();\n            if (previousSong) {\n                this.play(previousSong, this.currentPlaylist);\n            }\n        }\n    }\n\n    handleSongEnd() {\n        const nextSong = this.getNextSong();\n        if (nextSong) {\n            this.play(nextSong, this.currentPlaylist);\n        } else {\n            this.isPlaying = false;\n            this.audio.currentTime = 0;\n            this.syncButtons(null);\n        }\n    }\n\n    updatePlayerInfo(songElement) {\n        this.titleElement.textContent = songElement.querySelector('.title').textContent;\n        this.artistElement.textContent = songElement.querySelector('.artist').textContent;\n\n        const genres = [...songElement.querySelectorAll('.genres li')].map(li => li.textContent);\n        this.genresElement.textContent = genres.join(', ');\n\n        const thumbSrc = songElement.querySelector('.thumb').src;\n        this.thumbElement.src = thumbSrc;\n    }\n\n    syncButtons(songElement) {\n        document.querySelectorAll('.play-button').forEach(button => button.classList.remove('active'));\n        document.querySelectorAll('.song').forEach(song => song.classList.remove('active'));\n\n        if (songElement) {\n            songElement.querySelector('.play-button').classList.add('active');\n            songElement.classList.add('active');\n            this.playPauseButton.classList.add('active');\n            this.barPlayer.classList.add('active');\n        } else {\n            this.playPauseButton.classList.remove('active');\n            this.barPlayer.classList.remove('active');\n        }\n    }\n\n    updateProgressBar() {\n        const progress = (this.audio.currentTime / this.audio.duration) * 100;\n        this.progressBar.style.width = `${progress}%`;\n    }\n\n    seek(event) {\n        const rect = this.progressBarContainer.getBoundingClientRect();\n        const offsetX = event.clientX - rect.left;\n        const percentage = offsetX / rect.width;\n        this.audio.currentTime = percentage * this.audio.duration;\n    }\n\n    startDrag(event) {\n        const dragHandler = (e) => this.seek(e);\n        const stopDrag = () => {\n            document.removeEventListener('mousemove', dragHandler);\n            document.removeEventListener('mouseup', stopDrag);\n        };\n\n        document.addEventListener('mousemove', dragHandler);\n        document.addEventListener('mouseup', stopDrag);\n\n        this.seek(event);\n    }\n}\n\n// Start player\nconst player = new Player();\n\n//Take all playlists\ndocument.querySelectorAll('.playlist').forEach(playlist => {\n    const songs = playlist.querySelectorAll('.song');\n\n    //start play the first song \n    songs.forEach(song => {\n        const playButton = song.querySelector('.play-button');\n        playButton.addEventListener('click', () => {\n            if (player.currentSong === song && player.isPlaying) {\n                player.pause(song);\n            } else {\n                player.play(song, playlist);\n                player.initializeAddToPlaylistForm();\n            }\n        });\n    });\n});","const glideElement = document.querySelector('.splide');\n\nconsole.log(glideElement )\n\nif (glideElement) {\n    new Splide( '.splide', {\n        type   : 'fade',\n        perPage: 1,\n        arrows: false,\n        autoplay: true,\n        interval: 6000,\n        speed: 2000,\n        rewind: true\n    } ).mount();\n}\n\n  ","// efeito hover no link de login\nconst loginLink = document.querySelector('.login_link');\nconst userIcon = document.querySelector('.user-icon');\n\n// Adiciona os eventos de mouseover e mouseout ao elemento com a classe 'login_link'\nloginLink.addEventListener('mouseover', () => {\n    userIcon.classList.add('active'); \n});\n\nloginLink.addEventListener('mouseout', () => {\n    userIcon.classList.remove('active'); \n});\n\n//efeito de foco no search \nconst input = document.getElementById('s');\nconst searchForm = document.querySelector('.searchform');\n\n// Adiciona evento de foco no input\ninput.addEventListener('focus', () => {\n    searchForm.classList.add('active'); // Adiciona a classe 'active'\n});\n\n// Adiciona evento de perda de foco no input\ninput.addEventListener('blur', () => {\n    searchForm.classList.remove('active'); // Remove a classe 'active'\n});\n\n"]}